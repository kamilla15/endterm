name: Deploy Docker to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    # Step 1: Check out code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Log in to the container registry
    - name: Log in to Docker Hub
      if: secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Log in to GitHub Container Registry
      if: secrets.GHCR_TOKEN
      run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

    - name: Log in to Amazon ECR
      if: secrets.AWS_ACCESS_KEY_ID && secrets.AWS_SECRET_ACCESS_KEY
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set region $AWS_REGION
        $(aws ecr get-login-password --region $AWS_REGION) | docker login --username AWS --password-stdin <YOUR_ECR_REPOSITORY_URI>

    # Step 3: Build and tag the Docker image
    - name: Build Docker image
      run: |
        docker build -t my-app:latest .
        docker tag my-app:latest <YOUR_CONTAINER_REGISTRY>/my-app:latest

    # Step 4: Push the Docker image
    - name: Push to Docker Hub
      if: secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD
      run: docker push <YOUR_DOCKER_HUB_REPO>/my-app:latest

    - name: Push t
